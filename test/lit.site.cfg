# -*- Python -*-

import os
import re
import sys
import subprocess

import lit.formats
import lit.util
from lit.llvm import llvm_config

# Configuration file for the 'lit' test runner.

# name: The name of this test suite.
config.name = 'LLOV'

# testFormat: The test format to use to interpret tests.
config.test_format = lit.formats.ShTest(execute_external=False)

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.c', '.cpp']

# excludes: A list of individual files to exclude.
config.excludes = ['Inputs', 'CMakeLists.txt', 'README.txt', 'LICENSE.txt' ]

#Config.llvm_src_root = getattr(config, 'llvm_src_root', None)
#Config.llvm_obj_root = getattr(config, 'llvm_obj_root', None)
#Config.llvm_libs_dir = getattr(config, 'llvm_libs_dir', None)
#Config.llvm_tools_dir = getattr(config, 'llvm_tools_dir', None)
# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(os.path.abspath(__file__))
config.test_exec_root = os.path.join(config.test_source_root, '')
config.llvm_tools_dir = os.path.join(config.test_source_root, '../bin')
config.llvm_libs_dir = os.path.join(config.test_source_root, '../lib')
config.llvm_obj_root = os.path.join(config.test_source_root, '../bin')
# Check that the object root is known.
if config.test_exec_root is None:
    lit_config.fatal('Could not determine execution root for tests!')
config.pipefail = True
config.target_triple = [ ]

config.substitutions.append(('%{inputs}', os.path.join(
    config.test_source_root, 'Inputs')))
config.substitutions.append(('%{python}', '"%s"' % (sys.executable)))

# Enable coverage.py reporting, assuming the coverage module has been installed
# and sitecustomize.py in the virtualenv has been modified appropriately.
if lit_config.params.get('check-coverage', None):
    config.environment['COVERAGE_PROCESS_START'] = os.path.join(
        os.path.dirname(__file__), ".coveragerc")

# When running the lit tests standalone, we want to define the same features
# that the llvm_config defines. This means that the 'system-windows' feature
# (and any others) need to match the names in llvm_config for consistency
if not llvm_config:
    if sys.platform.startswith('win') or sys.platform.startswith('cygwin'):
        config.available_features.add('system-windows')

config.environment['PATH'] = os.path.pathsep.join((config.llvm_tools_dir,
                                                   config.environment['PATH']))
LIB_PATH = os.path.pathsep.join((config.llvm_libs_dir,
                                config.environment.get('LD_LIBRARY_PATH','')))
config.environment['LD_LIBRARY_PATH'] = LIB_PATH

# clang knows whether it is compiled with -DNDEBUG.
import subprocess
try:
    clang_cmd = subprocess.Popen([os.path.join(config.llvm_tools_dir, 'clang'), '--version'],
                           stdout = subprocess.PIPE,
                           env=config.environment)
except OSError:
    print("Could not find clang in " + config.llvm_tools_dir)
    exit(42)

if re.search(r'with assertions', clang_cmd.stdout.read().decode('ascii')):
    config.available_features.add('asserts')
clang_cmd.wait()

try:
    llvm_config_cmd = subprocess.Popen([os.path.join(
                                        config.llvm_tools_dir,
                                        'llvm-config'),
                                        '--targets-built'],
                                       stdout = subprocess.PIPE,
                                       env=config.environment)
except OSError:
    print("Could not find llvm-config in " + config.llvm_tools_dir)
    exit(42)

try:
    FileCheck_cmd = subprocess.Popen([os.path.join(
        config.llvm_tools_dir,
        'FileCheck'),
        '--version'],
        stdout = subprocess.PIPE,
        env=config.environment)
except OSError:
    print("Could not find FileCheck in " + config.llvm_tools_dir)
    exit(42)

config.omp_library_dir = config.llvm_libs_dir
config.omp_header_directory = config.llvm_obj_root + "/include/"
config.omp_flags = " -I " + config.test_source_root + \
    " -I " + config.omp_header_directory + \
    " -L " + config.omp_library_dir + " "

config.llov_library_dir = config.llvm_libs_dir
config.llov_library = "OpenMPVerify.so"
config.llov_flags = "-fopenmp -g -Xclang -disable-O0-optnone " + \
    " -Xclang -load -Xclang " + \
     config.llov_library_dir + "/" + config.llov_library

config.substitutions.append(("%clangLLOV", config.llov_flags + config.omp_flags))
config.substitutions.append(("%optLoadLLOV", ' -load ' + config.llov_library_dir + '/' + config.llov_library))
